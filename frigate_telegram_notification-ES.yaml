blueprint:
  name: Frigate NVR - Notificaciones de Telegram
  description: Permite crear automatizaciones para recibir capturas y clips desde Frigate NVR, en Telegram
  domain: automation
  input:
    camera:
      name: Cámara a usar
      description: El nombre de la cámara, tal cual está definido en el archivo de configuración de Frigate NVR (/conf.yml).
    target_chat:
      name: Objetivo (chat_id)
      description: 'El chat_id usado por el bot de Telegram. 
                !secret chat_id no está permitido en el plano, es necesario especificar aquí el chat_id.

        '
    notification:
      name: Notification
      description: 'Selecciona "true" para enviar notificaciones silenciosas, o "false" para anunciarlas normalmente.
      El valor predeterminado es "false".
        '
      selector:
        select:
          options:
          - 'true'
          - 'false'
      default: 'false'
    base_url:
      name: (Opcional) URL Base
      description: La dirección externa de la instancia de Home Assistant. Por defecto
        se usará una URL relativa, y abrirá los clips en la app (en lugar del navegador),
        lo que podría causar problemas con algunos dispositivos.
      default: ''
    zone_filter:
      name: (Opcional) Filtro de zonas
      description: Solo notificar si el objeto se encuentra en una zona en específico.
      default: false
      selector:
        boolean: {}
    zones:
      name: (Opcional) Activación por zonas
      description: Una lista (-) de zonas de las que se enviarán notificaciones.
      default: []
      selector:
        object: {}
    labels:
      name: (Opcional) Activación por objetos
      description: Una lista (-) de objetos de los que se enviarán notificaciones.
      default: []
      selector:
        object: {}
    presence_filter:
      name: (Opcional) Filtro de presencia
      description: Solo notificar si la entidad de presencia no se encuentra en casa ("home").
      default: ''
      selector:
        entity: {}
  source_url: https://github.com/JuanZagoR/Blueprint_Frigate-Telegram-Notification-ES/blob/main/frigate_telegram_notification-ES.yaml
mode: single
max_exceeded: silent
trigger:
  platform: mqtt
  topic: frigate/events
  payload: !input 'camera'
  value_template: '{{ value_json[''after''][''camera''] }}'
variables:
  id: '{{ trigger.payload_json[''after''][''id''] }}'
  camera: '{{ trigger.payload_json[''after''][''camera''] }}'
  camera_name: '{{ camera | replace(''_'', '' '') | title }}'
  target_chat: !input 'target_chat'
  object: '{{ trigger.payload_json[''after''][''label''] }}'
  label: '{{ object | title }}'
  entered_zones: '{{ trigger.payload_json[''after''][''entered_zones''] }}'
  type: '{{ trigger.payload_json[''type''] }}'
  base_url: !input 'base_url'
  zone_only: !input 'zone_filter'
  input_zones: !input 'zones'
  zones: '{{ input_zones | list }}'
  input_labels: !input 'labels'
  labels: '{{ input_labels | list }}'
  presence_entity: !input 'presence_filter'
  notification: !input 'notification'
condition:
- '{{ type != ''end'' }}'
- '{{ not zone_only or entered_zones|length > 0 }}'
- '{{ not zones|length or zones|select(''in'', entered_zones)|list|length > 0 }}'
- '{{ not labels|length or object in labels }}'
- '{{ not presence_entity or not is_state(presence_entity, ''home'') }}'
action:
- service: telegram_bot.send_photo
  data:
    target: '{{ target_chat }}'
    disable_notification: '{{ notification }}'
    caption: |
      Movimiento detectado en: {{ camera_name }} (ID: {{ id }})
    url: >-
      {{base_url}}/api/frigate/notifications/{{id}}/snapshot.jpg
- repeat:
    sequence:
    - wait_for_trigger:
      - platform: mqtt
        topic: frigate/events
        payload: '{{ id }}'
        value_template: '{{ value_json[''after''][''id''] }}'
      timeout:
        minutes: 2
      continue_on_timeout: false
    - condition: template
      value_template: '{{ wait.trigger.payload_json[''type''] == ''end'' }}'
    - service: telegram_bot.send_video
      data:
        target: '{{ target_chat }}'
        disable_notification: '{{ notification }}'
        caption: 'Movimiento detectado en: {{ camera_name }}'
        url: >-
          {{base_url}}/api/frigate/notifications/{{id}}/{{camera}}/clip.mp4
    until: '{{ wait.trigger.payload_json[''type''] == ''end'' }}'